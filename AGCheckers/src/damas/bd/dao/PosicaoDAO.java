package damas.bd.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;

import damas.bd.TransactionManager;
import damas.bd.core.Configuracao;
import damas.bd.core.Posicao;

public class PosicaoDAO {  	
	
	@SuppressWarnings("deprecation")
	public void insertPosicao(Posicao c){  
		Session sessao = TransactionManager.getSession();
		PreparedStatement preparedStatement;
		try {
			preparedStatement = sessao.connection().prepareStatement("SELECT * from Posicao where peca = '" + c.getPeca() + "' and "
					+ "posicao = '" + c.getPosicao() + "'");

			//;, autoGeneratedKeys)
			//.prepareStatement("SELECT myuser, webpage, datum, summery, COMMENTS from FEEDBACK.COMMENTS");
			ResultSet rs = preparedStatement.executeQuery();
			if (rs.next()) {
				Criteria crit = sessao.createCriteria(Posicao.class).add(Restrictions.like("id", rs.getInt(1)));
				Posicao c2 = (Posicao)crit.uniqueResult();
				c2.getConfiguracoes().addAll(c.getConfiguracoes());
				ArrayList<Configuracao> ac = (ArrayList<Configuracao>) c.getConfiguracoes();
				for(Configuracao conf : ac) {
					conf.getPosicoes().add(c2);
					conf.getPosicoes().remove(c);
				}				
				sessao.save(c2);
			} else {			
				sessao.save(c); 
			}	
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void insertPosicao(int posicao, char valor){  
		Posicao c = new Posicao(posicao,valor);
		Session sessao = TransactionManager.getSession();
		sessao.save(c);  
	}
	
	public void updatePosicao(Posicao c){  
		Session sessao = TransactionManager.getSession();
		sessao.update(c);  
	}  

	public Posicao retrievePosicao(Integer pk){  
		Session sessao = TransactionManager.getSession();
		Posicao c = (Posicao)sessao.load(Posicao.class, pk);  
		if(c != null)
			System.out.println("Posicao obtida: " + c.toString());
		else
			System.out.println("Erro ao obter Posicao");
		return c;  
	}  
	
	public Posicao retrievePosicaoByPosicao(int posicao){  
		Session sessao = TransactionManager.getSession();
		Criteria crit = sessao.createCriteria(Posicao.class).add(Restrictions.like("posicao", posicao));
		Posicao u = (Posicao) crit.uniqueResult();
		return u;  
	} 
	
	public ArrayList<Posicao> getListPosicao(){  
		Session sessao = TransactionManager.getSession();
		Criteria crit = sessao.createCriteria(Posicao.class);
		@SuppressWarnings("unchecked")
		ArrayList<Posicao> u = (ArrayList<Posicao>) crit.list();
		return u;  
	}
	
	public void deletePosicao(Posicao c){  
		Session sessao = TransactionManager.getSession();
		sessao.delete(c);  
	}  
}
